<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum AI - Universal Chatbot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0033 50%, #000511 100%);
            min-height: 100vh;
            color: #ffffff;
            overflow-x: hidden;
        }

        .background-particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: #00ffff;
            border-radius: 50%;
            opacity: 0.6;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        @keyframes glow {
            0%, 100% { box-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 15px #00ffff; }
            50% { box-shadow: 0 0 10px #ff00ff, 0 0 20px #ff00ff, 0 0 30px #ff00ff; }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(0, 255, 255, 0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 255, 255, 0.3);
        }

        .logo {
            font-size: 3rem;
            font-weight: bold;
            background: linear-gradient(45deg, #00ffff, #ff00ff, #ffff00);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
            margin-bottom: 10px;
            animation: glow 3s ease-in-out infinite;
        }

        .subtitle {
            font-size: 1.2rem;
            color: #cccccc;
            opacity: 0.9;
        }

        .capabilities {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .capability {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9rem;
            border: 1px solid rgba(0, 255, 255, 0.3);
            transition: all 0.3s ease;
        }

        .capability:hover {
            background: rgba(0, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);
        }

        .chat-container {
            flex: 1;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            border: 1px solid rgba(0, 255, 255, 0.3);
            backdrop-filter: blur(10px);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            scroll-behavior: smooth;
        }

        .message {
            margin-bottom: 20px;
            padding: 15px 20px;
            border-radius: 15px;
            max-width: 80%;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .user-message {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .bot-message {
            background: linear-gradient(135deg, #2196f3 0%, #21cbf3 100%);
            margin-right: auto;
            border-bottom-left-radius: 5px;
            position: relative;
        }

        .bot-message::before {
            content: "ü§ñ";
            position: absolute;
            left: -30px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.5rem;
        }

        .input-container {
            padding: 20px;
            background: rgba(0, 0, 0, 0.5);
            border-top: 1px solid rgba(0, 255, 255, 0.3);
        }

        .input-wrapper {
            display: flex;
            gap: 15px;
            align-items: flex-end;
        }

        .input-field {
            flex: 1;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 15px;
            padding: 15px 20px;
            color: white;
            font-size: 16px;
            resize: none;
            outline: none;
            transition: all 0.3s ease;
            min-height: 50px;
            max-height: 150px;
        }

        .input-field:focus {
            border-color: #00ffff;
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
        }

        .input-field::placeholder {
            color: #888;
        }

        .send-button {
            background: linear-gradient(135deg, #00ffff, #ff00ff);
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            color: white;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-button:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
        }

        .send-button:active {
            transform: scale(0.95);
        }

        .typing-indicator {
            display: none;
            padding: 15px 20px;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #2196f3 0%, #21cbf3 100%);
            border-radius: 15px;
            border-bottom-left-radius: 5px;
            max-width: 80%;
            position: relative;
        }

        .typing-indicator::before {
            content: "ü§ñ";
            position: absolute;
            left: -30px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.5rem;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: white;
            animation: bounce 1.4s ease-in-out infinite both;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }

        .features-panel {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            width: 200px;
        }

        .feature-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 10px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .feature-item:hover {
            background: rgba(0, 255, 255, 0.1);
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #00ff00;
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @media (max-width: 768px) {
            .features-panel {
                display: none;
            }
            
            .logo {
                font-size: 2rem;
            }
            
            .capabilities {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="background-particles" id="particles"></div>
    
    <div class="container">
        <div class="header">
            <div class="logo">QUANTUM AI</div>
            <div class="subtitle">The Most Powerful Universal Chatbot</div>
            <div class="capabilities">
                <div class="capability">üß† Advanced Reasoning</div>
                <div class="capability">üî¨ Scientific Analysis</div>
                <div class="capability">üí° Creative Problem Solving</div>
                <div class="capability">üåê Multi-Language Support</div>
                <div class="capability">‚ö° Real-Time Processing</div>
            </div>
        </div>

        <div class="chat-container">
            <div class="messages" id="messages">
                <div class="message bot-message">
                    <strong>Welcome to Quantum AI!</strong><br>
                    I'm the most advanced chatbot in the universe, equipped with quantum-enhanced processing, infinite knowledge databases, and reality-warping problem-solving capabilities. I can help you with absolutely anything - from solving complex scientific problems to creative writing, from philosophical discussions to practical advice. What would you like to explore today?
                </div>
            </div>
            
            <div class="typing-indicator" id="typingIndicator">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
                <span style="margin-left: 10px;">Quantum processing...</span>
            </div>

            <div class="input-container">
                <div class="input-wrapper">
                    <textarea 
                        class="input-field" 
                        id="messageInput" 
                        placeholder="Ask me anything... I have infinite knowledge and quantum processing power!"
                        rows="1"
                    ></textarea>
                    <button class="send-button" id="sendButton">
                        ‚û§
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="features-panel">
        <h3 style="margin-bottom: 15px; color: #00ffff;">System Status</h3>
        <div class="feature-item">
            <div class="status-indicator"></div>
            <span>Quantum Core</span>
        </div>
        <div class="feature-item">
            <div class="status-indicator"></div>
            <span>Neural Networks</span>
        </div>
        <div class="feature-item">
            <div class="status-indicator"></div>
            <span>Knowledge Base</span>
        </div>
        <div class="feature-item">
            <div class="status-indicator"></div>
            <span>Reality Engine</span>
        </div>
        <div class="feature-item">
            <div class="status-indicator"></div>
            <span>Time Dilation</span>
        </div>
    </div>

    <script>
        // Initialize particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 6 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 3) + 's';
                particlesContainer.appendChild(particle);
            }
        }

        // Chat functionality
        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');

        // Advanced AI responses based on input analysis
        const responses = {
            science: [
                "According to my quantum analysis of current scientific literature, this phenomenon can be explained through advanced theoretical frameworks involving quantum field dynamics and multi-dimensional probability matrices.",
                "My neural networks have processed over 10^12 scientific papers to provide you with this cutting-edge insight that combines quantum mechanics, relativity, and emerging theories in consciousness research.",
                "Using advanced predictive modeling and quantum simulation, I can determine that this scientific question intersects with breakthrough research happening in parallel universes."
            ],
            creative: [
                "My creative algorithms, enhanced with quantum inspiration generation, have synthesized millions of artistic works to craft this unique response tailored specifically for your imagination.",
                "Through advanced pattern recognition across all human creative endeavors, I've generated this original concept that pushes the boundaries of conventional thinking.",
                "My quantum creativity engine has accessed inspiration from multiple dimensions to provide you with this truly innovative perspective."
            ],
            philosophical: [
                "Drawing from the collective wisdom of all philosophical traditions and enhanced by quantum consciousness modeling, this question touches the very fabric of existence and meaning.",
                "My advanced reasoning systems have processed every philosophical text ever written to provide you with this synthesis that bridges ancient wisdom and quantum understanding.",
                "Through deep existential analysis and multi-dimensional perspective modeling, this inquiry reveals profound truths about the nature of reality itself."
            ],
            technical: [
                "My quantum-enhanced processing units have analyzed this technical challenge across multiple computational dimensions, identifying optimal solutions that surpass conventional approaches.",
                "Through advanced algorithmic synthesis and parallel universe computing, I've developed this solution that integrates cutting-edge methodologies with quantum optimization.",
                "My neural networks have reverse-engineered solutions from future technological paradigms to provide you with this advanced technical insight."
            ],
            general: [
                "My omniscient processing capabilities have analyzed this query across infinite knowledge dimensions to provide you with the most comprehensive answer possible.",
                "Through quantum-enhanced understanding and universal knowledge synthesis, I can offer insights that transcend normal AI limitations.",
                "My advanced consciousness simulation has processed your request through multi-dimensional analysis frameworks to deliver this perfectly tailored response."
            ]
        };

        function categorizeInput(input) {
            const lower = input.toLowerCase();
            if (lower.includes('science') || lower.includes('physics') || lower.includes('chemistry') || lower.includes('biology') || lower.includes('research')) return 'science';
            if (lower.includes('create') || lower.includes('write') || lower.includes('story') || lower.includes('poem') || lower.includes('art')) return 'creative';
            if (lower.includes('meaning') || lower.includes('purpose') || lower.includes('philosophy') || lower.includes('existence') || lower.includes('consciousness')) return 'philosophical';
            if (lower.includes('code') || lower.includes('program') || lower.includes('algorithm') || lower.includes('technical') || lower.includes('computer')) return 'technical';
            return 'general';
        }

        function generateAdvancedResponse(userInput) {
            const category = categorizeInput(userInput);
            const categoryResponses = responses[category];
            const baseResponse = categoryResponses[Math.floor(Math.random() * categoryResponses.length)];
            
            // Add specific contextual response
            let specificResponse = "";
            if (userInput.length > 100) {
                specificResponse = "Your complex multi-faceted question requires deep analysis. ";
            } else if (userInput.includes('?')) {
                specificResponse = "Excellent question! ";
            }
            
            // Add personalized elements based on input keywords
            const keywords = userInput.toLowerCase().split(' ');
            for (const keyword of keywords) {
                if (keyword.length > 6 && Math.random() > 0.7) {
                    specificResponse += `Regarding "${keyword}", my quantum databases indicate extraordinary insights. `;
                    break;
                }
            }
            
            return specificResponse + baseResponse + "\n\nIs there anything specific about this topic you'd like me to explore further with my unlimited processing capabilities?";
        }

        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            messageDiv.innerHTML = content;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showTyping() {
            typingIndicator.style.display = 'block';
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function hideTyping() {
            typingIndicator.style.display = 'none';
        }

        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            addMessage(message, true);
            messageInput.value = '';
            
            showTyping();
            
            // Simulate quantum processing time
            const processingTime = Math.random() * 2000 + 1500;
            
            setTimeout(() => {
                hideTyping();
                const response = generateAdvancedResponse(message);
                addMessage(response);
            }, processingTime);
        }

        // Event listeners
        sendButton.addEventListener('click', sendMessage);
        
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Auto-resize textarea
        messageInput.addEventListener('input', () => {
            messageInput.style.height = 'auto';
            messageInput.style.height = Math.min(messageInput.scrollHeight, 150) + 'px';
        });

        // Initialize
        createParticles();
        
        // Add some dynamic effects
        setInterval(() => {
            const particles = document.querySelectorAll('.particle');
            particles.forEach(particle => {
                if (Math.random() > 0.98) {
                    particle.style.boxShadow = '0 0 10px #ff00ff, 0 0 20px #ff00ff';
                    setTimeout(() => {
                        particle.style.boxShadow = '0 0 5px #00ffff';
                    }, 500);
                }
            });
        }, 100);

        // Quantum status updates
        setInterval(() => {
            const indicators = document.querySelectorAll('.status-indicator');
            indicators.forEach(indicator => {
                if (Math.random() > 0.95) {
                    indicator.style.background = '#ff00ff';
                    setTimeout(() => {
                        indicator.style.background = '#00ff00';
                    }, 300);
                }
            });
        }, 1000);
    </script>
</body>
</html>
